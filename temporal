import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.net.*;
import com.google.gson.*;

import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.*;
public class Solution {
    /*
     * Complete the function below.
     * Base url: https://jsonmock.hackerrank.com/api/movies/search/?Title=
     */
    static int totalPages=Integer.MAX_VALUE;
 
    static String[] getMovieTitles(String substr) {
        List<String> titlesLst = new ArrayList<>();

IntStream.iterate(1, n -> n + 1).filter(n -> n < totalPages).limit(totalPages).forEach(c -> {

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(
            new URL("https://jsonmock.hackerrank.com/api/movies/search/?Title=" + URLEncoder.encode(substr, "UTF-8") + "&page=" + c)
                    .openConnection().getInputStream()))) {

        Supplier<Stream<String>> contentStream =  reader::lines;

        Optional<JsonObject> objectAsJob = contentStream.get()
                .map(contentStreamLine -> new Gson().fromJson(contentStreamLine, JsonObject.class)).findFirst();
        totalPages = objectAsJob.map(convertedLines -> convertedLines.get("total_pages").getAsInt()).get();
        Optional<JsonArray> dataFilter = objectAsJob.map(convertedLines -> convertedLines.getAsJsonArray("data"));

        IntStream.iterate(0, n -> n + 1).filter(n -> n < dataFilter.get().size()).forEach(dataLines -> {
            titlesLst.add(dataFilter.get().get(dataLines).getAsJsonObject().get("Title").getAsString());
            Collections.sort(titlesLst);
        });

    } catch (Exception e) {
        e.printStackTrace();
    }

    totalPages++;
});





    return titlesLst.stream().toArray(String[]::new);
    }
    public static void main(String[] args) throws IOException{